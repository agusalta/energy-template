---
import Container from "../../shared/Container.astro";
import GradiantText from "../../shared/GradiantText.astro";
import SubTitle2 from "../../shared/SubTitle2.astro";
import Title2 from "../../shared/Title2.astro";
import EmailForm from "./components/EmailForm.astro";
import InvolvementCard from "./components/InvolvementCard.astro";
import { getInvolvedSection } from "./data";

export interface Props {
  className?: string;
}
const { className } = Astro.props;
---

<style>
  @keyframes fadeInUp {
    from {
      transform: translateY(20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .animate-title {
    opacity: 0;
  }

  .animate-subtitle {
    opacity: 0;
  }

  .animate-card {
    opacity: 0;
  }

  .card-delay-1 { animation-delay: 0.2s; }
  .card-delay-2 { animation-delay: 0.4s; }
  .card-delay-3 { animation-delay: 0.6s; }
</style>

<section id="cta" class={`${className}`}>
  <Container
    className="mx-auto flex flex-col items-center justify-center text-center"
  >
    <Title2 className="animate-title">{getInvolvedSection.title}</Title2>
    <SubTitle2 className="animate-subtitle">
      <GradiantText>{getInvolvedSection.subheading1_1}</GradiantText>
      {getInvolvedSection.subheading1_2}
    </SubTitle2>
  </Container>
  <Container className="space-y-10 md:sapce-y-12">
    <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8">
      {
        getInvolvedSection.initiatives.map((initiative, index) => {
          return (
            <InvolvementCard
              className={`animate-card card-delay-${index + 1}`}
              title={initiative.title}
              description={initiative.description}
              visual={initiative.visual}
            />
          );
        })
      }
    </div>

    <div class="flex justify-center">
      <EmailForm className="animate-card card-delay-3" />
    </div>
  </Container>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const section = document.querySelector('#cta');
    if (!section) return;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const title = document.querySelector('.animate-title');
          const subtitle = document.querySelector('.animate-subtitle');
          const cards = document.querySelectorAll('.animate-card');

          if (title) {
            (title as HTMLElement).style.animation = 'fadeInUp 0.8s ease-out forwards';
          }

          if (subtitle) {
            (subtitle as HTMLElement).style.animation = 'fadeInUp 0.8s ease-out 0.2s forwards';
          }

          cards.forEach(card => {
            (card as HTMLElement).style.animation = 'fadeInUp 0.8s ease-out forwards';
          });

          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1
    });

    observer.observe(section);
  });
</script>
