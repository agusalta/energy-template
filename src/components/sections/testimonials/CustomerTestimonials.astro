---
import Container from "../../shared/Container.astro";
import GradiantText from "../../shared/GradiantText.astro";
import SubTitle2 from "../../shared/SubTitle2.astro";
import Title2 from "../../shared/Title2.astro";
import Testimonial from "./components/Testimonial.astro";
import { testimonialsSection } from "./data.js";

export interface Props {
  className?: string;
}

const { className } = Astro.props;
---

<section id="testimonials" class={`${className} opacity-0 transition-all duration-1000 ease-in-out`}>
  <Container
    className="mx-auto flex flex-col items-center justify-center text-center"
  >
    <h2 class="transform translate-y-4 opacity-0 transition-all duration-700 ease-out">
      <Title2>{testimonialsSection.title}</Title2>
    </h2>
    <h3 class="transform translate-y-4 opacity-0 transition-all duration-700 ease-out delay-100">
      <SubTitle2>
        <GradiantText>{testimonialsSection.subheading1_1}</GradiantText><br />
        {testimonialsSection.subheading1_2}
      </SubTitle2>
    </h3>
  </Container>
  <Container className="flex flex-col items-center">
    <div
      class="mt-8 flex flex-col gap-8 midmd:flex-row text-heading-3 font-medium"
    >
      {
        testimonialsSection.testimonials.map((testimonial, index) => {
          const delay = (index + 2) * 100; // Empezamos desde 200ms para dar tiempo a la animación del título
          return (
            <div class={`transform translate-y-8 opacity-0 transition-all duration-700 ease-out delay-[${delay}ms] testimonial-item`}>
              <Testimonial
                name={testimonial.name}
                visual={testimonial.visual}
                occupation={testimonial.occupation}
                quote={testimonial.quote}
              />
            </div>
          );
        })
      }
    </div>
  </Container>
</section>

<script>
  function animateOnScroll() {
    // Animar el encabezado
    const section = document.querySelector('#testimonials');
    if (!section) return;

    const headerObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          section.classList.remove('opacity-0');
          section.classList.add('opacity-100');
          
          // Animar título y subtítulo
          const titleElements = section.querySelectorAll('.transform:not(.testimonial-item)');
          titleElements.forEach(element => {
            element.classList.remove('opacity-0', 'translate-y-4');
            element.classList.add('opacity-100', 'translate-y-0');
          });
          
          headerObserver.unobserve(section);
        }
      });
    }, {
      threshold: 0.1
    });

    headerObserver.observe(section);

    // Animar cada testimonio individualmente
    const testimonialItems = document.querySelectorAll('.testimonial-item');
    const itemObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.remove('opacity-0', 'translate-y-8');
          entry.target.classList.add('opacity-100', 'translate-y-0');
          itemObserver.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.2,
      rootMargin: '0px 0px -100px 0px'
    });

    testimonialItems.forEach(item => {
      itemObserver.observe(item);
    });
  }

  // Ejecutar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', animateOnScroll);
</script>
