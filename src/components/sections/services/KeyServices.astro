---
import Container from "../../shared/Container.astro";
import Title2 from "../../shared/Title2.astro";
import ServiceCard from "./components/ServiceCard.astro";
import ServiceCopyTextCard from "./components/ServiceCopyTextCard.astro";
import { servicesSectionData } from "./data";

export interface Props {
  className?: string;
}

const { className } = Astro.props;
---

<section id="services" class={`${className} opacity-0 transition-all duration-1000 ease-in-out`}>
  <Container size="wide">
    <Title2 className="transform translate-y-4 opacity-0 transition-all duration-700 ease-out">{servicesSectionData.title}</Title2>
  </Container>
  <Container size="wide">
    <div class="grid grid-col-1 md:grid-cols-3 lg:grid-cols-4 gap-y-2 gap-x-4">
      <ServiceCopyTextCard
        className="md:col-span-2 flex flex-col transform translate-x-4 opacity-0 transition-all duration-700 ease-out"
        subheading={servicesSectionData.subheading}
      />
      <div class="transform translate-y-4 opacity-0 transition-all duration-700 ease-out delay-100">
        <ServiceCard
          title={servicesSectionData.services[0].title}
          description={servicesSectionData.services[0].briefDescription}
          visual={servicesSectionData.services[0].visual}
        />
      </div>
      <div class="transform translate-y-4 opacity-0 transition-all duration-700 ease-out delay-200">
        <ServiceCard
          title={servicesSectionData.services[1].title}
          description={servicesSectionData.services[1].briefDescription}
          visual={servicesSectionData.services[1].visual}
        />
      </div>
      <div class="transform translate-y-4 opacity-0 transition-all duration-700 ease-out delay-300">
        <ServiceCard
          title={servicesSectionData.services[2].title}
          description={servicesSectionData.services[2].briefDescription}
          visual={servicesSectionData.services[2].visual}
        />
      </div>
      <div class="transform translate-y-4 opacity-0 transition-all duration-700 ease-out delay-400">
        <ServiceCard
          title={servicesSectionData.services[3].title}
          description={servicesSectionData.services[3].briefDescription}
          visual={servicesSectionData.services[3].visual}
        />
      </div>
      <div class="transform translate-y-4 opacity-0 transition-all duration-700 ease-out delay-500">
        <ServiceCard
          title={servicesSectionData.services[4].title}
          description={servicesSectionData.services[4].briefDescription}
          visual={servicesSectionData.services[4].visual}
        />
      </div>
      <div class="transform translate-y-4 opacity-0 transition-all duration-700 ease-out delay-600">
        <ServiceCard
          title={servicesSectionData.services[5].title}
          description={servicesSectionData.services[5].briefDescription}
          visual={servicesSectionData.services[5].visual}
        />
      </div>
    </div>
  </Container>
</section>

<script>
  // Función para animar elementos cuando son visibles
  function animateOnScroll() {
    const section = document.querySelector('#services');
    if (!section) return;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          section.classList.remove('opacity-0');
          section.classList.add('opacity-100');
          
          // Animar todos los elementos hijos
          const elements = section.querySelectorAll('.transform');
          elements.forEach(element => {
            element.classList.remove('opacity-0', 'translate-y-4', 'translate-x-4');
            element.classList.add('opacity-100', 'translate-y-0', 'translate-x-0');
          });
          
          observer.unobserve(section);
        }
      });
    }, {
      threshold: 0.1
    });

    observer.observe(section);
  }

  // Ejecutar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', animateOnScroll);
</script>
