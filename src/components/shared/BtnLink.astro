---
import Button from "./Button.astro";

export interface Props {
  href: string;
  text: string;
  className?: string;
  variant: "primary" | "secondary" | "cta";
  isNavbar?: boolean;
}

const { href, text, className, variant, isNavbar = false } = Astro.props;

const getThemeStyle = (variant: "primary" | "secondary" | "cta") => {
  if (variant === "primary") {
    return "bg-primary relative border-primary";
  }
  if (variant === "secondary") {
    return "bg-secondary relative border-secondary";
  }
  if (variant === "cta") {
    return "bg-cta relative border-cta";
  }
  return "";
};

const getTextColor = (variant: "primary" | "secondary" | "cta") => {
  if (variant === "primary") {
    return "text-accent font-medium";
  }
  if (variant === "secondary") {
    return "text-accent font-medium";
  }
  if (variant === "cta") {
    return "text-accent font-medium";
  }
  return "";
};

const base = isNavbar 
  ? "rounded-lg outline-none relative overflow-hidden px-4 py-2 border transition-all duration-300 ease-linear hover:scale-[1.02] active:scale-[0.98] shadow-sm hover:shadow-md focus:ring-2 focus:ring-primary/50 focus:outline-none"
  : "rounded-lg outline-none relative overflow-hidden px-6 py-3 border transition-all duration-300 ease-linear hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl focus:ring-2 focus:ring-primary/50 focus:outline-none";
---

<a
  href={href}
  class={` 
    ${base} 
    ${getTextColor(variant)}
    ${getThemeStyle(variant)}
    ${className}`}
>
  <span class={`relative z-10`}>
    {text}
  </span>
</a>
<!-- <Button
  color={"primary"}
  variant={"outline"}
  className={"min-w-max hover:bg-primary-950/40"}
>
  <span class="relative z-10"> {text} </span>
</Button> -->
